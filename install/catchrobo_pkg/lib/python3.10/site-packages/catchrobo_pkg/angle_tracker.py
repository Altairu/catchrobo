# -*- coding: utf-8 -*-
"""
RobomasterAngleTracker クラスは、ロボマスモーターの角度を管理するためのクラスです。
このクラスは、無限角度の計測を可能にします。
"""


class RobomasterAngleTracker:
    def __init__(self, mm_per_rotation):
        """
        :param mm_per_rotation: 1回転あたりの移動距離（ミリメートル）
        """
        self.mm_per_rotation = mm_per_rotation
        # 最後に受信した生角度
        self.last_raw = None
        # 累積角度（0基準）
        self.total_angle = 0

    def update(self, raw_angle):
        """
        モーターから受信した生角度（0〜8191）を更新します。

        :param raw_angle: モーターから受信した生角度
        :return: 累積角度
        """
        try:
            if self.last_raw is None:
                self.last_raw = raw_angle
                return self.total_angle

            # 差分を計算（巻き戻し対応）
            delta = (raw_angle - self.last_raw + 8192) % 8192
            if delta > 4096:
                delta -= 8192

            # 累積角度を更新
            self.total_angle += delta
            self.last_raw = raw_angle
            return self.total_angle
        except Exception as e:
            print(f"Error in update: {e}")
            return self.total_angle  # エラー時は現在の累積角度を返す

    def get_angle(self):
        """
        累積角度を取得します。

        :return: 累積角度（8192 = 360度）
        """
        return self.total_angle

    def get_raw_angle(self):
        """
        最新の生角度を取得します。

        :return: 生角度（0〜8191）
        """
        return self.last_raw


def main():
    """
    エントリーポイント関数
    """
    try:
        tracker = RobomasterAngleTracker(mm_per_rotation=100)  # 必要に応じて値を変更
        print("Angle Tracker initialized with mm_per_rotation=100.")

        # テストロジック
        test_angles = [1000, 2000, 3000, 4000, 5000]
        for angle in test_angles:
            cumulative_angle = tracker.update(angle)
            print(f"Raw angle: {angle}, Cumulative angle: {cumulative_angle}")

        print(f"Final cumulative angle: {tracker.get_angle()}")
    except Exception as e:
        print(f"Error in main: {e}")


if __name__ == "__main__":
    main()
